{
  "TFloSourceMap":{
    "ModuleID":-1,
    "FloUniqueID":"FC5948D8-D8EF-4417-81CC-3EAFC1E5BBC7",
    "FIDS":"{B79D04EA-CB3F-4F99-8577-EC007E49BA58}",
    "FolderFIDS":"{43B0C670-FE0B-4736-9AC6-FA824309DC75}",
    "ModuleName":"Functions Conversions Generic",
    "Version":240,
    "SourceType_ENUM":"fstDatabase",
    "SourceID":-1,
    "DestType_ENUM":"fstDatabase",
    "DestID":-1,
    "SourceFIDS":"{9F559881-FF0C-4DCF-BD58-865981F8D846}",
    "DestFIDS":"{DDDFA192-D4D2-4582-B288-926D1B6521B4}",
    "Initialised":true,
    "SourceChanged":false,
    "FloViewMap1":{
      "ClassName":"TFloViewMap",
      "Description":"TestCase",
      "LinkedDataFormula.Strings_STRINGLIST":[
      "procedure LinkedDataEvent(var LinkedData:TdaQueryDataView);  \/\/TestCase",
      "begin",
      "  LinkedData := TestCase;",
      "end;"
      ],
      "CompiledStatus":1,
      "FloFieldMap1":{
        "ClassName":"TFloFieldMap",
        "Description":"TestCaseRef",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/TestCaseRef",
        "begin",
        "  Value := TestCase['#39'TestCaseRef'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap1.Owner",
        "FieldName":"TestCaseRef",
        "FloFieldType_ENUM":"fftPrimarykeyUserSet"
      },
      "FloFieldMap21":{
        "ClassName":"TFloFieldMap",
        "Description":"JIRA_Reference",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/JIRA_Reference",
        "begin",
        "  Value := TestCase['#39'JIRA_Reference'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap1.Owner",
        "FieldName":"JIRA_Reference",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap2":{
        "ClassName":"TFloFieldMap",
        "Description":"TestCaseName",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/TestCaseName",
        "begin",
        "  Value := TestCase['#39'TestCaseName'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap1.Owner",
        "FieldName":"TestCaseName",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap3":{
        "ClassName":"TFloFieldMap",
        "Description":"TestCaseDescripton",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/TestCaseDescripton",
        "begin",
        "  Value := TestCase['#39'TestCaseDescripton'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap1.Owner",
        "FieldName":"TestCaseDescripton",
        "FloFieldType_ENUM":"fftUserSet"
      }
    },
    "FloViewMap2":{
      "ClassName":"TFloViewMap",
      "Description":"TestCaseStep",
      "LinkedDataFormula.Strings_STRINGLIST":[
      "procedure LinkedDataEvent(var LinkedData:TdaQueryDataView);  \/\/TestCaseStep",
      "begin",
      "  LinkedData := TestCaseStep;",
      "end;"
      ],
      "CompiledStatus":1,
      "FloFieldMap4":{
        "ClassName":"TFloFieldMap",
        "Description":"TestCaseRef",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/TestCaseRef",
        "begin",
        "  Value := TestCaseStep['#39'TestCaseRef'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap2.Owner",
        "FieldName":"TestCaseRef",
        "FloFieldType_ENUM":"fftPrimarykeyUserSet"
      },
      "FloFieldMap5":{
        "ClassName":"TFloFieldMap",
        "Description":"TestCaseStep",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/TestCaseStep",
        "begin",
        "  Value := TestCaseStep['#39'TestCaseStep'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap2.Owner",
        "FieldName":"TestCaseStep",
        "FloFieldType_ENUM":"fftPrimarykeyUserSet"
      },
      "FloFieldMap22":{
        "ClassName":"TFloFieldMap",
        "Description":"JIRA_Reference",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/JIRA_Reference",
        "begin",
        "  Value := TestCaseStep['#39'JIRA_Reference'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap2.Owner",
        "FieldName":"JIRA_Reference",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap6":{
        "ClassName":"TFloFieldMap",
        "Description":"TestCaseStepDescripton",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/TestCaseStepDescripton",
        "begin",
        "  Value := TestCaseStep['#39'TestCaseStepDescripton'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap2.Owner",
        "FieldName":"TestCaseStepDescripton",
        "FloFieldType_ENUM":"fftUserSet"
      }
    },
    "FloViewMap3":{
      "ClassName":"TFloViewMap",
      "Description":"TestCaseStepResults",
      "LinkedDataFormula.Strings_STRINGLIST":[
      "procedure LinkedDataEvent(var LinkedData:TdaQueryDataView);  \/\/TestCaseStepResults",
      "begin",
      "  LinkedData := TestCaseStepInput;",
      "end;"
      ],
      "OnStartMapFormula.Strings_STRINGLIST":[
      "procedure OnStartMapEvent;  \/\/TestCaseStepResults",
      "Var tempSQL : String;",
      "var SQLResult : variant;",
      "begin",
      "    Global1 := 1;",
      "",
      "    TempSQL :=  '#39'select max(testCaseResultSeqRunNo) from TestCaseStepResults where TestCaseResultRef = '#39' + '#39#39#39#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString ;",
      "    TempSQL := TempSQL + '#39#39#39' and TestCaseResultStep = '#39#39#39'   + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39#39#39#39';",
      "    TempSQL := TempSQL + '#39' and TestCaseResultSeq = '#39#39#39'  + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39#39#39#39'  ;",
      "",
      "    SQLResult := getSQLValueFromDest(TempSQL,0);",
      "",
      "  if varIsNull(SQLResult)  then",
      "    loginfo('#39'Var Is Null'#39')",
      "  else",
      "    Global1 := SQLResult;",
      "",
      "end;"
      ],
      "CompiledStatus":1,
      "FloFieldMap7":{
        "ClassName":"TFloFieldMap",
        "Description":"TestCaseResultRef",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/TestCaseResultRef",
        "begin",
        "  Value := TestCaseStepInput['#39'TestCaseInputRef'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"TestCaseResultRef",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap8":{
        "ClassName":"TFloFieldMap",
        "Description":"TestCaseResultStep",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/TestCaseResultStep",
        "begin",
        "  Value := TestCaseStepInput['#39'TestCaseInputStep'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"TestCaseResultStep",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap9":{
        "ClassName":"TFloFieldMap",
        "Description":"TestCaseResultSeq",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/TestCaseResultSeq",
        "begin",
        "  Value := TestCaseStepInput['#39'TestCaseInputSeq'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"TestCaseResultSeq",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap18":{
        "ClassName":"TFloFieldMap",
        "Description":"testCaseResultSeqRunNo",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/testCaseResultSeqRunNo",
        "begin",
        "",
        "  Value := Global1 + 1;",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"testCaseResultSeqRunNo",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap25":{
        "ClassName":"TFloFieldMap",
        "Description":"Environment",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/Environment",
        "begin",
        "  Value :=  P_Environment['#39'ENVIRONMENT'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"Environment",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap26":{
        "ClassName":"TFloFieldMap",
        "Description":"Build",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/Build",
        "begin",
        "  Value :=  P_Environment['#39'BUILD'#39'].Value;",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"Build",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap23":{
        "ClassName":"TFloFieldMap",
        "Description":"JIRA_Reference",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/JIRA_Reference",
        "begin",
        "  Value := TestCaseStepInput['#39'JIRA_Reference'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"JIRA_Reference",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap17":{
        "ClassName":"TFloFieldMap",
        "Description":"TestFunction",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/TestFunction",
        "begin",
        "  Value := TestCaseStepInput['#39'TestFunction'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"TestFunction",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap20":{
        "ClassName":"TFloFieldMap",
        "Description":"ExpectedResult",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/ExpectedResult",
        "begin",
        "  Value := TestCaseStepInput['#39'ExpectedResult'#39'].Value",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"ExpectedResult",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap10":{
        "ClassName":"TFloFieldMap",
        "Description":"ResultString",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/ResultString",
        "var tempStr : String;",
        "var  vYear, vMonth, vDay, vHour, vMin, vSec, vMil : word;",
        "",
        "\/\/var tempInt : Integer;",
        "\/\/var tempBin : Binary;",
        "begin",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'FloatToStr'#39' then             \/\/ 21",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := FloatToStr(TestCaseStepInput['#39'InputFloat'#39'].Value)   ;",
        "    End;",
        "    ",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IntToStr'#39' then               \/\/ 31",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := IntToStr(TestCaseStepInput['#39'InputInteger'#39'].Value)   ;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IntTo64Str'#39' then             \/\/  41",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := Int64ToStr(TestCaseStepInput['#39'InputInteger'#39'].Value)   ;",
        "    End;",
        "",
        "{  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IntToBin'#39' then               \/\/ 32     Doesn'#39't work use    IntToBin2",
        "    Begin",
        "      tempStr := TestCaseStepInput['#39'InputFormat'#39'].AsString;",
        "      Value   := IntToBin(TestCaseStepInput['#39'InputInteger'#39'].Value,StrToInt(tempStr))   ;",
        "    End;",
        " }",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IntToBin'#39' then               \/\/ 32",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      tempStr := TestCaseStepInput['#39'InputFormat'#39'].AsString;",
        "      Value   := IntToBin2(TestCaseStepInput['#39'InputInteger'#39'].Value)   ;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IntToHex'#39' then               \/\/ 33",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      tempStr := TestCaseStepInput['#39'InputFormat'#39'].AsString;",
        "      Value   := IntToHex(TestCaseStepInput['#39'InputInteger'#39'].Value,TestCaseStepInput['#39'InputFormat'#39'].AsInteger)   ;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'BinToHex'#39' then               \/\/ 52",
        "    Begin",
        "      Loginfo('#39'****  Test Ignored    TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep =  + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "\/\/      Value := IntToBin(BinToHex(TestCaseStepInput['#39'InputInteger'#39'].Value,)   ;             \/\/ bin to HEX",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'DecodeDateTime'#39' then       \/\/ 10.07.23",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      DecodeDateTime(TestCaseStepInput['#39'InputDateTime'#39'].value,vYear, vMonth, vDay, vHour, vMin, vSec, vMil);",
        "      Value :=  '#39'year=|'#39' + intToStr(vYear) + '#39'| month=|'#39' + intToStr(vMonth) + '#39'| day=|'#39' +  intToStr(vDay) + '#39'| Hour=|'#39' +  intToStr(vHour) + '#39'| min=|'#39' +  intToStr(vMin) + '#39'| sec=|'#39' +  intToStr(vSec) + '#39'| millisec=|'#39' +  intToStr(vMil) +'#39'|'#39';",
        "      loginfo(value) ;",
        "    End;",
        "",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"ResultString",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap11":{
        "ClassName":"TFloFieldMap",
        "Description":"ResultDateTime",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/ResultDateTime",
        "var  vYear, vMonth, vDay, vHour, vMin, vSec, vMil : integer;",
        "\/\/var tempDateTime : Tdatetime ;",
        "begin",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'StringToDateTime'#39' then       \/\/ 11  10.07.04",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := StringToDateTime(TestCaseStepInput['#39'InputFormat'#39'].AsString,TestCaseStepInput['#39'InputString'#39'].AsString);",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'Date'#39' then       \/\/ 10.07.01",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := Date;;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'Now'#39' then       \/\/ 10.07.02",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := Now;;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'Time'#39' then       \/\/ 10.07.03",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := Time;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'FormatDateTime'#39' then       \/\/ 10.07.05",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := FormatDateTime(TestCaseStepInput['#39'InputFormat'#39'].AsString,Now);",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'StartOfTheMonth'#39' then       \/\/ 10.07.15",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := StartOfTheMonth(TestCaseStepInput['#39'InputDateTime].value);",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'EndOfTheMonth then       \/\/ 10.07.16",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := EndOfTheMonth(TestCaseStepInput['#39'InputDateTime'#39'].value);",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IncYear'#39' then       \/\/ 10.07.20",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := IncYear(TestCaseStepInput['#39'InputDateTime'#39'].value,StrToInt(TestCaseStepInput['#39'InputFormat'#39'].Value));",
        "    End;",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IncYear'#39' then       \/\/ 10.07.20",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := IncYear(TestCaseStepInput['#39'InputDateTime'#39'].value,StrToInt(TestCaseStepInput['#39'InputFormat'#39'].Value));",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IncMonth'#39' then       \/\/ 10.07.21",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := IncMonth(TestCaseStepInput['#39'InputDateTime'#39'].value,StrToInt(TestCaseStepInput['#39'InputFormat'#39'].Value));",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IncDay'#39' then       \/\/ 10.07.22",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := IncDay(TestCaseStepInput['#39'InputDateTime'#39'].value,StrToInt(TestCaseStepInput['#39'InputFormat'#39'].Value));",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'EncodeDateTime'#39' then       \/\/ 10.07.24",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      vYear  := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,1,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      vMonth := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,2,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      vDay   := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,3,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      vHour  := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,4,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      vMin   := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,5,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      vSec   := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,6,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      vMil   := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,7,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      Value := EncodeDateTime(vYear, vMonth, vDay, vHour, vMin, vSec, vMil);",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'RecodeYear'#39' then       \/\/ 10.07.26",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := RecodeYear(TestCaseStepInput['#39'InputDateTime'#39'].value,StrToInt(TestCaseStepInput['#39'InputFormat'#39'].Value));",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'RecodeMonth'#39' then       \/\/ 10.07.27",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := RecodeMonth(TestCaseStepInput['#39'InputDateTime'#39'].value,StrToInt(TestCaseStepInput['#39'InputFormat'#39'].Value));",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'CompareDate'#39' then       \/\/ 10.07.28",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      If  CompareDate(TestCaseStepInput['#39'InputDateTime'#39'].value,StringToDateTime('#39'yyyy-mm-dd hh:nn:ss.zzz'#39',TestCaseStepInput['#39'InputFormat'#39'].Value)) = LessThanValue then",
        "        Begin",
        "          loginfo('#39'First date = |'#39' + formatDateTime('#39'yyyy-mm-dd hh:nn:ss.zzz'#39',TestCaseStepInput['#39'InputDateTime'#39'].value) + '#39'|  Second Date = |'#39' + TestCaseStepInput['#39'InputFormat'#39'].Value) ;",
        "          D_TestCaseStepResults['#39'ResultString'#39'].Value  := '#39'less   ;",
        "        End",
        "      else",
        "      If  CompareDate(TestCaseStepInput['#39'InputDateTime'#39'].value,StringToDateTime('#39'yyyy-mm-dd hh:nn:ss.zzz'#39',TestCaseStepInput['#39'InputFormat'#39'].Value)) = EqualsValue  then",
        "        Begin",
        "          loginfo('#39'First date = |'#39' + formatDateTime('#39'yyyy-mm-dd hh:nn:ss.zzz'#39',TestCaseStepInput['#39'InputDateTime'#39'].value) + '#39'|  Second Date = |'#39' + TestCaseStepInput['#39'InputFormat'#39'].Value) ;",
        "          D_TestCaseStepResults['#39'ResultString'#39'].Value  := '#39'equal",
        "        End",
        "      else",
        "      If  CompareDate(TestCaseStepInput['#39'InputDateTime'#39'].value,StringToDateTime('#39'yyyy-mm-dd hh:nn:ss.zzz'#39',TestCaseStepInput['#39'InputFormat'#39'].Value)) = GreaterThanValue then",
        "        Begin",
        "          loginfo('#39'First date = |'#39' + formatDateTime('#39'yyyy-mm-dd hh:nn:ss.zzz'#39',TestCaseStepInput['#39'InputDateTime'#39'].value) + '#39'|  Second Date = |'#39' + TestCaseStepInput['#39'InputFormat'#39'].Value) ;",
        "          D_TestCaseStepResults['#39'ResultString'#39'].Value  := '#39'greater'#39' ;",
        "         End;",
        "     Value := TestCaseStepInput['#39'InputDateTime'#39'].value;",
        "",
        "   End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'CompareDateTime'#39' then       \/\/ 10.07.29",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      If  CompareDateTime(TestCaseStepInput['#39'InputDateTime'#39'].value,StringToDateTime('#39'yyyy-mm-dd hh:nn:ss.zzz'#39',TestCaseStepInput[InputFormat'#39'].Value)) = LessThanValue then",
        "          D_TestCaseStepResults['#39'ResultString'#39'].Value  := '#39'less",
        "      else",
        "      If  CompareDateTime(TestCaseStepInput['#39'InputDateTime'#39'].value,StringToDateTime('#39'yyyy-mm-dd hh:nn:ss.zzz'#39',TestCaseStepInput[InputFormat'#39'].Value)) = EqualsValue  then",
        "          D_TestCaseStepResults['#39'ResultString'#39'].Value  := '#39'equal",
        "      else",
        "      If  CompareDateTime(TestCaseStepInput['#39'InputDateTime'#39'].value,StringToDateTime('#39'yyyy-mm-dd hh:nn:ss.zzz'#39',TestCaseStepInput[InputFormat'#39'].Value)) = GreaterThanValue then",
        "          D_TestCaseStepResults['#39'ResultString'#39'].Value  := '#39'greater'#39' ;",
        "      Value := TestCaseStepInput['#39'InputDateTime'#39'].value;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'Get20thOfNextMonth'#39' then       \/\/ 10.07.30",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := Get20thOfNextMonth(TestCaseStepInput['#39'InputDateTime'#39'].value);",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'LocalToUTC'#39' then       \/\/ 10.07.31",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := LocalToUTC(TestCaseStepInput['#39'InputDateTime'#39'].value);",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'UTCToLocal'#39' then       \/\/ 10.07.32",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := UTCToLocal(TestCaseStepInput['#39'InputDateTime'#39'].value);",
        "    End;",
        "",
        "",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"ResultDateTime",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap12":{
        "ClassName":"TFloFieldMap",
        "Description":"ResultFloat",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/ResultFloat",
        "begin",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'StrToFloat'#39' then             \/\/ 12",
        "     Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := StrToFloat(TestCaseStepInput['#39'InputString'#39'].AsString) ;",
        "     End;",
        "     ",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'CurrStrToFloat'#39' then         \/\/ 14",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := FloCurrStrToFloat(TestCaseStepInput['#39'InputString].AsString) ;",
        "     End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'StrToInt64'#39' then             \/\/ 16",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := StrToInt64(TestCaseStepInput['#39'InputString'#39'].Value)    ;",
        "     End;",
        "",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"ResultFloat",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap13":{
        "ClassName":"TFloFieldMap",
        "Description":"ResultInteger",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/ResultInteger",
        "begin",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'StrToInt'#39' then               \/\/ 13",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := StrToInt(TestCaseStepInput['#39'InputString'#39'].Value)    ;",
        "     End;",
        "",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'StrToIntDef'#39' then            \/\/ 15",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := StrToIntDef(TestCaseStepInput['#39'InputString'#39'].Value,StrToInt(TestCaseStepInput['#39'InputFormat'#39'].Value))    ;",
        "     End;",
        "",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'BinToInt'#39' then               \/\/ 51",
        "    Begin",
        "     Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "     Value := BinToInt(TestCaseStepInput['#39'InputString'#39'].Value)    ;",
        "     End;",
        "",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'HexToInt'#39' then               \/\/ 61",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "\/\/      Value := HexToInt(TestCaseStepInput['#39'InputString'#39'].Value)    ;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'DaysInYear'#39' then               \/\/ 10.07.10",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := DaysInYear(TestCaseStepInput['#39'InputDateTime'#39'].Value)    ;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'DaysInMonth'#39' then               \/\/ 10.07.11",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := DaysInMonth(TestCaseStepInput['#39'InputDateTime'#39'].Value)    ;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'YearOf'#39' then               \/\/ 10.07.12",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := YearOf(TestCaseStepInput['#39'InputDateTime'#39'].Value)    ;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'MonthOf'#39' then               \/\/ 10.07.13",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := MonthOf(TestCaseStepInput['#39'InputDateTime'#39'].Value)    ;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'DayOf'#39' then               \/\/ 10.07.14",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := DayOf(TestCaseStepInput['#39'InputDateTime'#39'].Value)    ;",
        "    End;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'YearsBetween then               \/\/ 10.07.17",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := YearsBetween(stringtoDateTime(TestCaseStepInput[InputFormat'#39'].Value,TestCaseStepInput['#39'InputString'#39'].Value),TestCaseStepInput['#39'InputDateTime'#39'].Value)    ;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'MonthsBetween then               \/\/ 10.07.18",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := MonthsBetween(stringtoDateTime(TestCaseStepInput[InputFormat'#39'].Value,TestCaseStepInput['#39'InputString'#39'].Value),TestCaseStepInput['#39'InputDateTime'#39'].Value)    ;",
        "    End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'DaysBetween'#39' then               \/\/ 10.07.14",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := DaysBetween(stringtoDateTime(TestCaseStepInput['#39'InputFormat'#39'].Value,TestCaseStepInput['#39'InputString'#39'].Value),TestCaseStepInput['#39'InputDateTime'#39'].Value)    ;",
        "    End;",
        "",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"ResultInteger",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap14":{
        "ClassName":"TFloFieldMap",
        "Description":"ResultMoney",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/ResultMoney",
        "begin",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'CurrStrToFloat'#39' then         \/\/ 14",
        "    Begin",
        "      Loginfo('#39'TesCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput[TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := TestCaseStepInput['#39'InputMoney'#39'].Value ;",
        "    End;",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"ResultMoney",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap15":{
        "ClassName":"TFloFieldMap",
        "Description":"ResultBlob",
        "CompiledStatus":0,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"ResultBlob",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap16":{
        "ClassName":"TFloFieldMap",
        "Description":"ResultUnicode",
        "CompiledStatus":0,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"ResultUnicode",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap19":{
        "ClassName":"TFloFieldMap",
        "Description":"ResultBoolean",
        "OnMapFormula.Strings_STRINGLIST":[
        "procedure OnMapEvent(var Value:Variant);  \/\/ResultBoolean",
        "var arg1, arg2, arg3, arg4, arg5, arg6, arg7 : integer;",
        "var tempStr, DateStr, TimeStr : string;",
        "var vDateTime : TdateTime ;",
        "\/\/var vYear, vMonth, vDay, vHour, vMin, vSec, vMil : word;",
        "",
        "begin",
        "",
        "   If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IsPM'#39' then       \/\/ 10.07.06",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      Value := IsPM(StringToDateTime(TestCaseStepInput['#39'InputFormat'#39'].AsString,TestCaseStepInput['#39'InputString'#39'].AsString));",
        "    End;",
        "",
        "   If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IsValidDate then       \/\/ 10.07.07",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      DateStr := splitString(TestCaseStepInput['#39'InputFormat'#39'].AsString,1,'#39' '#39')  ;                             \/\/ separate the date",
        "      arg1 := StrToIntDef(splitString(DateStr,3,TestCaseStepInput['#39'InputFormat'#39'].Value),0 ) ;",
        "      arg2 := StrToIntDef(splitString(DateStr,2,TestCaseStepInput['#39'InputFormat'#39'].Value),0 ) ;",
        "      arg3 := StrToIntDef(splitString(DateStr,1,TestCaseStepInput['#39'InputFormat'#39'].Value),0 ) ;",
        "      Value := IsValidDate(arg1,arg2,arg3);",
        "    End;",
        "",
        "   If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IsValidTime then       \/\/ 10.07.08",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      tempStr := StringReplaceAll(TestCaseStepInput['#39'InputFormat].AsString,'#39'.'#39','#39':'#39')  ;                      \/\/ Change dec point of a second to a decimal colon for consistance when using SplitStrings below",
        "      TimeStr := splitString(TestCaseStepInput['#39'InputFormat'#39'].AsString,2,'#39' '#39')  ;                             \/\/ separate the Time",
        "",
        "      arg1 := StrToIntDef(splitString(TimeStr,3,TestCaseStepInput['#39'InputFormat'#39'].Value),0 ) ;",
        "      arg2 := StrToIntDef(splitString(TimeStr,2,TestCaseStepInput['#39'InputFormat'#39'].Value),0 ) ;",
        "      arg3 := StrToIntDef(splitString(TimeStr,4,TestCaseStepInput['#39'InputFormat'#39'].Value),0 ) ;",
        "      arg4 := StrToIntDef(splitString(TimeStr,1,TestCaseStepInput['#39'InputFormat'#39'].Value),0 ) ;",
        "      Value := IsValidTime(arg1,arg2,arg3,arg4);",
        "    End;",
        "",
        "   If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'IsValidDateTime'#39' then       \/\/ 10.07.09",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      tempStr := StringReplaceAll(TestCaseStepInput['#39'InputFormat].AsString,'#39'.'#39','#39':'#39')  ;                      \/\/ Change dec point of a second to a decimal colon for consistance when using SplitStrings below",
        "      TimeStr := splitString(TestCaseStepInput['#39'InputFormat'#39'].AsString,2,'#39' '#39')  ;                             \/\/ separate the Time",
        "      DateStr := splitString(TestCaseStepInput['#39'InputFormat'#39'].AsString,1,'#39' '#39')  ;                             \/\/ separate the date",
        "\/\/      tempstr  := splitString(DateStr,3,'#39'\/'#39');",
        "",
        "      arg1  := StrToIntDef(splitString(DateStr,3,'#39'\/'#39'),0 ) ;                                                                                                                                                                               D_TestCaseStepResults[ResultDateTime'#39'].Value",
        "      arg2  := StrToIntDef(splitString(DateStr,2,'#39'\/'#39'),0 ) ;",
        "      arg3  := StrToIntDef(splitString(DateStr,1,'#39'\/'#39'),0 ) ;",
        "",
        "      arg4  := StrToIntDef(splitString(TimeStr,1,'#39':'#39'),0 ) ;",
        "      arg5  := StrToIntDef(splitString(TimeStr,2,'#39':'#39'),0 ) ;",
        "      arg6  := StrToIntDef(splitString(TimeStr,3,'#39':'#39'),0 ) ;",
        "      arg7  := StrToIntDef(splitString(TimeStr,4,'#39':'#39'),0 ) ;",
        "      Value := IsValidDateTime(arg1,arg2,arg3,arg4,arg5,arg6,arg7);",
        "",
        "   End;",
        "",
        "  If TestCaseStepInput['#39'TestFunction'#39'].AsString = '#39'TryEncodeDateTime'#39' then       \/\/ 10.07.25",
        "    Begin",
        "      Loginfo('#39'TestCaseRef = '#39' + TestCaseStepInput['#39'TestCaseInputRef'#39'].AsString + '#39'    TestCaseInputStep = '#39' + TestCaseStepInput['#39'TestCaseInputStep'#39'].AsString + '#39'    TestCaseInputSeq = '#39' + TestCaseStepInput['#39'TestCaseInputSeq'#39'].AsString + '#39'    Function = '#39' + TestCaseStepInput['#39'TestFunction'#39'].AsString );",
        "      arg1 := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,1,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      arg2 := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,2,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      arg3 := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,3,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      arg4 := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,4,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      arg5 := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,5,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      arg6 := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,6,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      arg7 := strToInt(splitString(TestCaseStepInput['#39'InputString'#39'].Value,7,TestCaseStepInput['#39'InputFormat'#39'].Value) );",
        "      Value := TryEncodeDateTime(arg1, arg2, arg3, arg4, arg5, arg6, arg7, vDateTime);",
        "      D_TestCaseStepResults['#39'ResultDateTime'#39'].Value  := vDateTime;",
        "    End;",
        "",
        "",
        "end;"
        ],
        "CompiledStatus":1,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"ResultBoolean",
        "FloFieldType_ENUM":"fftUserSet"
      },
      "FloFieldMap24":{
        "ClassName":"TFloFieldMap",
        "Description":"ResultLogMsg",
        "CompiledStatus":0,
        "ViewMap_ENUM":"FloViewMap3.Owner",
        "FieldName":"ResultLogMsg",
        "FloFieldType_ENUM":"fftUserSet"
      }
    }
  }
}